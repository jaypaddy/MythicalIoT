# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: PYMODULEVER
  value: $Build.BuildId 

steps:

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'JAPADMAN Lab(881ac365-d417-4791-b2a9-48789acbb88d)'
    KeyVaultName: 'mythicaledgekv'
    SecretsFilter: '*'
    RunAsPreJob: true

- script: |
    echo PYMODULEVER $(PYMODULEVER)
    echo ACRPYMODULEREPO $(ACRPYMODULEREPO)
    echo ACRUSER $(ACRUSER)
    echo ACRPASSWORD $(ACRPASSWORD)
    echo ACRPYMODULEVER $(ACRPYMODULEVER)
    echo AMSARMID $(AMSARMID)
    echo AMSAADTENANTID $(AMSAADTENANTID)
    echo AMSAADAPPID $(AMSAADAPPID)
    echo AMSAADSECRET $(AMSAADSECRET)

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7'
    addToPath: true
    architecture: 'x64'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      sudo apt-get update 
      sudo apt-get install -y --no-install-recommends libcurl4-openssl-dev libboost-python1.58-dev libpython3-dev
      python -m pip install setuptools
      python -m pip install ptvsd==4.1.3

- task: AzureIoTEdge@2
  inputs:
    action: 'Build module images'
    templateFilePath: 'PyEdge/deployment.debug.template.json'
    defaultPlatform: 'amd64'
- task: AzureIoTEdge@2
  inputs:
    action: 'Push module images'
    containerregistrytype: 'Azure Container Registry'
    azureSubscriptionEndpoint: 'JAPADMAN Lab(881ac365-d417-4791-b2a9-48789acbb88d)'
    azureContainerRegistry: '{"loginServer":"paddycontainers.azurecr.io", "id" : "/subscriptions/881ac365-d417-4791-b2a9-48789acbb88d/resourceGroups/acrRG/providers/Microsoft.ContainerRegistry/registries/paddycontainers"}'
    templateFilePath: 'PyEdge/deployment.debug.template.json'
    defaultPlatform: 'amd64'
    fillRegistryCredential: 'true'
- task: CopyFiles@2
  inputs:
    Contents: |
      PyEdge/deployment.debug.template.json
      **/module.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'